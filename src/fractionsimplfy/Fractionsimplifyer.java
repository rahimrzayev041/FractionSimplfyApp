// Name: Rahim
// Surname: Rzayev
// Course name: Computer Science
/* Description: This is the type of program I built for simplifying fractions. 
In addition, the user can use the program to locate divisors and do computations such as addition, division, and so on. 
After that, if the user typed the wrong number in the textfield, the user can erase the numbers one by one.*/

package fractionsimplfy;

import javax.swing.JFrame;//The javax. swing. JFrame class is a type of container which inherits the java. ... JFrame works like the main window where components like labels, buttons, textfields are added to create a GUI
import javax.swing.JOptionPane;//javax.swing.JOptionPane. The Java API class javax. swing. JOptionPane has facilities for creating a dialog box that can appear on the computer's desktop to request input from or display messages to the user.

/**
 *
 * @author Rahim
 */
public class Fractionsimplifyer extends javax.swing.JFrame {

    
    public Fractionsimplifyer() {
        initComponents();
    }

 String sTemp; //creats temp string
        Integer newNum; //creats newNum Integer
        String ai;//creats temp string
       Integer den; //creats newNum Integer
       int divisor; //creats newNum Integer
        int divisor1; //creats newNum Integer
      String km;//creats temp string
              Integer newNum1; //creats newNum Integer
        String ai1;//creats temp string
       Integer den1; //creats newNum Integer
              
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        jSeparator1 = new javax.swing.JSeparator();
        num1 = new javax.swing.JTextField();
        num2 = new javax.swing.JTextField();
        result = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jButton11 = new javax.swing.JButton();
        jButton12 = new javax.swing.JButton();
        jButton13 = new javax.swing.JButton();
        jButton14 = new javax.swing.JButton();
        before = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        resultforcalculation = new javax.swing.JTextField();
        divisorforfirst = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        num3 = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel8 = new javax.swing.JLabel();
        jSeparator3 = new javax.swing.JSeparator();
        jSeparator4 = new javax.swing.JSeparator();
        num4 = new javax.swing.JTextField();
        jSeparator5 = new javax.swing.JSeparator();
        jButton9 = new javax.swing.JButton();
        jButton10 = new javax.swing.JButton();
        divisorforsecond = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        before2 = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        result2 = new javax.swing.JTextField();

        jList1.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(jList1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Fraction Reducer ");

        num1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                num1ActionPerformed(evt);
            }
        });
        num1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                num1KeyTyped(evt);
            }
        });

        num2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                num2KeyTyped(evt);
            }
        });

        result.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                resultKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                resultKeyTyped(evt);
            }
        });

        jButton2.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        jButton2.setText("Remove number");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        jButton3.setText("Remove number");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(0, 0, 0), new java.awt.Color(0, 0, 0), new java.awt.Color(0, 0, 0), new java.awt.Color(0, 0, 0)));

        jButton1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton1.setText("Simplify first fraction");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton4.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton4.setText("Print");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton5.setText("Restart");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton6.setText("Exit");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton7.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jButton7.setText("\"/\"  for first fraction");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jButton8.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton8.setText("Show divisor for first");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        jButton11.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton11.setText("\"+\" for all fractions");
        jButton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton11ActionPerformed(evt);
            }
        });

        jButton12.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton12.setText("Simplify second fraction");
        jButton12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton12ActionPerformed(evt);
            }
        });

        jButton13.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton13.setText("Show divisor for second");
        jButton13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton13ActionPerformed(evt);
            }
        });

        jButton14.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton14.setText("\"/\"  for second fraction");
        jButton14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton14ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jButton5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jButton6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 205, Short.MAX_VALUE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jButton7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jButton8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jButton11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jButton12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jButton13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jButton14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(9, 9, 9)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton12)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton13)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton14)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton6)
                .addGap(10, 10, 10))
        );

        before.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                beforeActionPerformed(evt);
            }
        });
        before.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                beforeKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                beforeKeyTyped(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel2.setText("Before simplifying:");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel3.setText("After simplifying:");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel4.setText("Fraction Reducer ");

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel5.setText("Calulation:");

        resultforcalculation.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                resultforcalculationKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                resultforcalculationKeyTyped(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel6.setText("Divisor for first fraction:");

        num3.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                num3KeyTyped(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel7.setText("First Fraction:");

        jSeparator2.setForeground(new java.awt.Color(0, 0, 0));
        jSeparator2.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jSeparator2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel8.setText("Second Fraction:");

        jSeparator3.setForeground(new java.awt.Color(0, 0, 0));

        jSeparator4.setForeground(new java.awt.Color(0, 0, 0));

        num4.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                num4KeyTyped(evt);
            }
        });

        jSeparator5.setForeground(new java.awt.Color(0, 0, 0));
        jSeparator5.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jSeparator5.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N

        jButton9.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        jButton9.setText("Remove number");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        jButton10.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        jButton10.setText("Remove number");
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel9.setText("Divisor for second fraction:");

        before2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                before2ActionPerformed(evt);
            }
        });
        before2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                before2KeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                before2KeyTyped(evt);
            }
        });

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel10.setText("Before simplifying:");

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel11.setText("After simplifying:");

        result2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                result2KeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                result2KeyTyped(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(resultforcalculation, javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(16, 16, 16)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(divisorforfirst, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(num2, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(num1, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jButton3)
                                            .addComponent(jButton2)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(67, 67, 67)
                                        .addComponent(jLabel7))
                                    .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(70, 70, 70)
                                .addComponent(jLabel2))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(74, 74, 74)
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(before)
                                .addComponent(result, javax.swing.GroupLayout.PREFERRED_SIZE, 279, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(38, 38, 38)
                        .addComponent(jSeparator5, javax.swing.GroupLayout.PREFERRED_SIZE, 8, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(26, 26, 26)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel4)
                            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(27, 27, 27)
                        .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 8, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(77, 77, 77)
                                .addComponent(jLabel8))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(31, 31, 31)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(70, 70, 70)
                                        .addComponent(jLabel10))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(74, 74, 74)
                                        .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(before2)
                                        .addComponent(result2, javax.swing.GroupLayout.PREFERRED_SIZE, 279, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(divisorforsecond, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(layout.createSequentialGroup()
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                .addComponent(jSeparator3)
                                                .addComponent(num3)
                                                .addComponent(num4, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGap(18, 18, 18)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(jButton9)
                                                .addComponent(jButton10)))))))))
                .addGap(0, 17, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel5)
                .addGap(423, 423, 423))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(80, 80, 80)
                        .addComponent(jLabel8)
                        .addGap(24, 24, 24)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(num3, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton9))
                        .addGap(9, 9, 9)
                        .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(9, 9, 9)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(num4, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton10))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(divisorforsecond, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel9))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel10)
                        .addGap(18, 18, 18)
                        .addComponent(before2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel11)
                        .addGap(18, 18, 18)
                        .addComponent(result2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(38, 38, 38)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(1, 1, 1)
                                .addComponent(jLabel7)
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jButton2)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(3, 3, 3)
                                        .addComponent(num1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jButton3)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(num2)
                                        .addGap(1, 1, 1)))
                                .addGap(36, 36, 36)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(divisorforfirst, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel6))
                                .addGap(32, 32, 32)
                                .addComponent(jLabel2)
                                .addGap(18, 18, 18)
                                .addComponent(before, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel3)
                                .addGap(18, 18, 18)
                                .addComponent(result, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(122, 122, 122)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSeparator5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 342, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jSeparator2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 342, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(resultforcalculation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        {
              sTemp = num1.getText(); //gets text from feild and stores in eTemp string
            newNum = Integer.parseInt(sTemp);//passes sTemp string to newNum 
              ai = num2.getText(); //gets text from feild and stores in eTemp string
            den = Integer.parseInt(ai);//passes ai string to den
            {
            before.setText("Fraction before simplified: " + newNum + " / " + den);// these codes are for demonstrating message in the textField
            }
        for(int i = newNum; i >= 1; i--)//The Java for loop is used to iterate a part of the program several times. If the number of iteration is fixed, it is recommended to use for loop. There are three types of for loops in java.
        {  
                    if(newNum % i == 0 && den % i == 0)//The Java if statement is the most simple decision-making statement. It is used to decide whether a certain statement or block of statements will be executed or not i.e if a certain condition is true then a block of statement is executed otherwise not.
                    {
                        divisor = i;// it makes divisor i
                 break;//Break: The break statement in java is used to terminate from the loop immediately. When a break statement is encountered inside a loop, the loop iteration stops there, and control returns from the loop immediately to the first statement after the loop
                    }
        }
        if(divisor != 0)//The Java if statement is the most simple decision-making statement.
        {
            newNum /= divisor;// these codes are for calculation
            den /= divisor;//these codes are for calculation
        }}
        
    result.setText("Fraction after simplified: " + newNum + " / " + den); //setText( ) method is used to set result in the textfield
        num1.setText(null);// these codes are for clearing text from textfield
        num2.setText(null);// these codes are for clearing text from textfield
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
     if(num1.getText().length()>0) // these codes are for getting text from textField
        {
            StringBuilder s=new StringBuilder(num1.getText());// these codes are for getting text from textField
            s.deleteCharAt(num1.getText().length()-1);// these codes are for getting text from textField
            num1.setText(s.toString());// these codes are for setting text on the textFiel}d
        }    
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
      if(num2.getText().length()>0) // these codes are for getting text from textField
        {
            StringBuilder s=new StringBuilder(num2.getText());// these codes are for getting text from textField
            s.deleteCharAt(num2.getText().length()-1);// these codes are for getting text from textField
            num2.setText(s.toString());// these codes are for setting text on the textFiel}d
        }    
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
         num1.setText(null);// these codes are for clearing text from textfield
        num2.setText(null);// these codes are for clearing text from textfield
          before.setText(null);// these codes are for clearing text from textfield
       result.setText(null);// these codes are for clearing text from textfield
       resultforcalculation.setText(null);// these codes are for clearing text from textfield
       divisorforfirst.setText(null);// these codes are for clearing text from textfield
        num3.setText(null);// these codes are for clearing text from textfield
        num4.setText(null);// these codes are for clearing text from textfield
           divisorforsecond.setText(null);// these codes are for clearing text from textfield
            before2.setText(null);// these codes are for clearing text from textfield
             result2.setText(null);// these codes are for clearing text from textfield
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
           JFrame frame = new JFrame("Print");// these codes are written for creating new JFrame

        if (JOptionPane.showConfirmDialog(frame,"Do you want to print list?"," EmployeeRecords",JOptionPane.YES_NO_OPTION)==JOptionPane.YES_NO_OPTION)//these code is used for showing option pane to user

        try{ /*
            try-catch block is used to handle exceptions in the program.
            If the program is not able to process the exception,
            it's thrown back to the JVM which terminates the program and prints the exception stack trace to the output stream
            */

            

            result.print();// this code is used for printing

        }catch (Exception e){//The finally block is used to provide statements that are executed regardless of whether any exceptions occur.
        }

    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
       System.exit(0);  // These codes are foor exitting from textfield
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
  // I wrote these codes for division
int a = Integer.parseInt(num1.getText());// these codes are for getting text from textfield and for creating new integer
int b = Integer.parseInt(num2.getText());// these codes are for getting text from textfield and for creating new integer
if(a>b){// it shows If a is bigger than b what will happen below
resultforcalculation.setText(" \n"  + a + "/"+ b + " = \n"+ ""+(a/b));   //these codes are for demonstrating text on the textfield
}else{//it shows if b is greater than a what will happen below
    resultforcalculation.setText(" \n" + b + " / " + a + " = \n"   + ""+(b/a));//these codes are for demonstrating text on the textfield
   System.out.println();//println() is used to print an argument that is passed to it. The statement can be broken into 3 parts which can be understood separately as: System: It is a final class defined in the java. 
    }            
    }//GEN-LAST:event_jButton7ActionPerformed

    private void beforeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_beforeActionPerformed
 // this textfield is for showing fraction before simplified
    }//GEN-LAST:event_beforeActionPerformed

    private void num1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_num1KeyTyped
          char c = evt.getKeyChar();//The getKeyChar method always returns a valid Unicode character or char undefined. For key pressed and key released events, the getKeyCode method returns the event's keyCode.
      if (!Character.isDigit(c)){//Function isdigit() takes a single argument in the form of an integer and returns the value of type int . Even though, isdigit() takes integer as an argument, character is passed to the function. Internally, the character is converted to its ASCII value for the check
          evt.consume();//The @Consumes annotation is used to specify which MIME media types of representations a resource can accept, or consume, from the client.
         num1.setText("Enter number!");//I wrote these codes, since when user entered letter to textfield it will show "enter number".
      }
    }//GEN-LAST:event_num1KeyTyped

    private void num2KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_num2KeyTyped
       char c = evt.getKeyChar();//The getKeyChar method always returns a valid Unicode character or char undefined. For key pressed and key released events, the getKeyCode method returns the event's keyCode.
      if (!Character.isDigit(c)){//Function isdigit() takes a single argument in the form of an integer and returns the value of type int . Even though, isdigit() takes integer as an argument, character is passed to the function. Internally, the character is converted to its ASCII value for the check
          evt.consume();//The @Consumes annotation is used to specify which MIME media types of representations a resource can accept, or consume, from the client.
          num2.setText("Enter number!");//I wrote these codes, since when user entered letter to textfield it will show "enter number".
      }
    }//GEN-LAST:event_num2KeyTyped

    private void beforeKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_beforeKeyTyped
            char c = evt.getKeyChar();//The getKeyChar method always returns a valid Unicode character or char undefined. For key pressed and key released events, the getKeyCode method returns the event's keyCode.
      if (!Character.isDigit(c)){//Function isdigit() takes a single argument in the form of an integer and returns the value of type int . Even though, isdigit() takes integer as an argument, character is passed to the function. Internally, the character is converted to its ASCII value for the check
          evt.consume();//The @Consumes annotation is used to specify which MIME media types of representations a resource can accept, or consume, from the client.
          before.setText("You can not enter any number and letter to this textField!");//I wrote these codes, since when user entered letter to textfield it will show "enter number".
      }
    }//GEN-LAST:event_beforeKeyTyped

    private void beforeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_beforeKeyPressed
           char c = evt.getKeyChar();//The getKeyChar method always returns a valid Unicode character or char undefined. For key pressed and key released events, the getKeyCode method returns the event's keyCode.
    
    if (Character.isLetter(c)|| Character.isWhitespace(c)||Character.isISOControl(c)){//The isLetter(char ch) method of Character class determines whether the given(or specified) character is a letter or not. A character is considered to be a letter if the general category type provided by the Character.
      before.setEditable(false);// If the parameter is false, then the user cannot type into the field.
  before.setText("You can not enter any number and letter to this textField!"); //setText( ) method is used to set "Enter letter!" message in the inputletter textField when the user adds number instead of letter
    }
    }//GEN-LAST:event_beforeKeyPressed

    private void resultKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_resultKeyPressed
             char c = evt.getKeyChar();//The getKeyChar method always returns a valid Unicode character or char undefined. For key pressed and key released events, the getKeyCode method returns the event's keyCode.
    if (Character.isLetter(c)|| Character.isWhitespace(c)||Character.isISOControl(c)){//The isLetter(char ch) method of Character class determines whether the given(or specified) character is a letter or not. A character is considered to be a letter if the general category type provided by the Character.
     result.setEditable(false);// If the parameter is false, then the user cannot type into the field.
 result.setText("You can not enter any number and letter to this textField!"); //setText( ) method is used to set "Enter letter!" message in the inputletter textField when the user adds number instead of letter
    }
    
    }//GEN-LAST:event_resultKeyPressed

    private void resultKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_resultKeyTyped
      char c = evt.getKeyChar();//The getKeyChar method always returns a valid Unicode character or char undefined. For key pressed and key released events, the getKeyCode method returns the event's keyCode.
      if (!Character.isDigit(c)){//Function isdigit() takes a single argument in the form of an integer and returns the value of type int . Even though, isdigit() takes integer as an argument, character is passed to the function. Internally, the character is converted to its ASCII value for the check
          evt.consume();//The @Consumes annotation is used to specify which MIME media types of representations a resource can accept, or consume, from the client.
          result.setText("You can not enter any number and letter to this textField!");//I wrote these codes, since when user entered letter to textfield it will show "enter number".
      }
    }//GEN-LAST:event_resultKeyTyped

    private void resultforcalculationKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_resultforcalculationKeyPressed
        char c = evt.getKeyChar();//The getKeyChar method always returns a valid Unicode character or char undefined. For key pressed and key released events, the getKeyCode method returns the event's keyCode.
    if (Character.isLetter(c)|| Character.isWhitespace(c)||Character.isISOControl(c)){//The isLetter(char ch) method of Character class determines whether the given(or specified) character is a letter or not. A character is considered to be a letter if the general category type provided by the Character.  
     resultforcalculation.setEditable(false);// If the parameter is false, then the user cannot type into the field.
 resultforcalculation.setText("You can not enter any number and letter to this textField!"); //setText( ) method is used to set "Enter letter!" message in the inputletter textField when the user adds number instead of letter
    }
    }//GEN-LAST:event_resultforcalculationKeyPressed

    private void resultforcalculationKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_resultforcalculationKeyTyped
            char c = evt.getKeyChar();//The getKeyChar method always returns a valid Unicode character or char undefined. For key pressed and key released events, the getKeyCode method returns the event's keyCode.
      if (!Character.isDigit(c)){//Function isdigit() takes a single argument in the form of an integer and returns the value of type int . Even though, isdigit() takes integer as an argument, character is passed to the function. Internally, the character is converted to its ASCII value for the check
          evt.consume();//The @Consumes annotation is used to specify which MIME media types of representations a resource can accept, or consume, from the client.
          resultforcalculation.setText("You can not enter any number and letter to this textField!");//I wrote these codes, since when user entered letter to textfield it will show "enter number".
      }
    }//GEN-LAST:event_resultforcalculationKeyTyped

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
divisorforfirst.setText(" \n" + " Divisor is " + divisor);// this code is for showing divisor
    }//GEN-LAST:event_jButton8ActionPerformed

    private void num1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_num1ActionPerformed
        // this textfield is for fraction
    }//GEN-LAST:event_num1ActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
           if(num3.getText().length()>0) // these codes are for getting text from textField
        {
            StringBuilder s=new StringBuilder(num3.getText());// these codes are for getting text from textField
            s.deleteCharAt(num3.getText().length()-1);// these codes are for getting text from textField
            num3.setText(s.toString());// these codes are for setting text on the textFiel}d
        }    
    }//GEN-LAST:event_jButton9ActionPerformed

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
           if(num4.getText().length()>0) // these codes are for getting text from textField
        {
            StringBuilder s=new StringBuilder(num4.getText());// these codes are for getting text from textField
            s.deleteCharAt(num4.getText().length()-1);// these codes are for getting text from textField
            num4.setText(s.toString());// these codes are for setting text on the textFiel}d
        }    
    }//GEN-LAST:event_jButton10ActionPerformed

    private void before2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_before2ActionPerformed
        // this textfield is for fraction
    }//GEN-LAST:event_before2ActionPerformed

    private void before2KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_before2KeyPressed
            char c = evt.getKeyChar();//The getKeyChar method always returns a valid Unicode character or char undefined. For key pressed and key released events, the getKeyCode method returns the event's keyCode.
    
    if (Character.isLetter(c)|| Character.isWhitespace(c)||Character.isISOControl(c)){//The isLetter(char ch) method of Character class determines whether the given(or specified) character is a letter or not. A character is considered to be a letter if the general category type provided by the Character.
      before2.setEditable(false);// If the parameter is false, then the user cannot type into the field.
  before2.setText("You can not enter any number and letter to this textField!"); //setText( ) method is used to set "Enter letter!" message in the inputletter textField when the user adds number instead of letter
    }
    }//GEN-LAST:event_before2KeyPressed

    private void before2KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_before2KeyTyped
                  char c = evt.getKeyChar();//The getKeyChar method always returns a valid Unicode character or char undefined. For key pressed and key released events, the getKeyCode method returns the event's keyCode.
      if (!Character.isDigit(c)){//Function isdigit() takes a single argument in the form of an integer and returns the value of type int . Even though, isdigit() takes integer as an argument, character is passed to the function. Internally, the character is converted to its ASCII value for the check
          evt.consume();//The @Consumes annotation is used to specify which MIME media types of representations a resource can accept, or consume, from the client.
          before2.setText("You can not enter any number and letter to this textField!");//I wrote these codes, since when user entered letter to textfield it will show "enter number".
      }
    }//GEN-LAST:event_before2KeyTyped

    private void result2KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_result2KeyPressed
                  char c = evt.getKeyChar();//The getKeyChar method always returns a valid Unicode character or char undefined. For key pressed and key released events, the getKeyCode method returns the event's keyCode.
    if (Character.isLetter(c)|| Character.isWhitespace(c)||Character.isISOControl(c)){//The isLetter(char ch) method of Character class determines whether the given(or specified) character is a letter or not. A character is considered to be a letter if the general category type provided by the Character.
     result2.setEditable(false);// If the parameter is false, then the user cannot type into the field.
 result2.setText("You can not enter any number and letter to this textField!"); //setText( ) method is used to set "Enter letter!" message in the inputletter textField when the user adds number instead of letter
    }
    
    }//GEN-LAST:event_result2KeyPressed

    private void result2KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_result2KeyTyped
         char c = evt.getKeyChar();//The getKeyChar method always returns a valid Unicode character or char undefined. For key pressed and key released events, the getKeyCode method returns the event's keyCode.
      if (!Character.isDigit(c)){//Function isdigit() takes a single argument in the form of an integer and returns the value of type int . Even though, isdigit() takes integer as an argument, character is passed to the function. Internally, the character is converted to its ASCII value for the check
          evt.consume();//The @Consumes annotation is used to specify which MIME media types of representations a resource can accept, or consume, from the client.
          result2.setText("You can not enter any number and letter to this textField!");//I wrote these codes, since when user entered letter to textfield it will show "enter number".
      }
    }//GEN-LAST:event_result2KeyTyped

    private void jButton12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton12ActionPerformed
             {
              km = num3.getText(); //gets text from feild and stores in eTemp string
            newNum1 = Integer.parseInt(km);//passes sTemp string to newNum 
              ai1 = num4.getText(); //gets text from feild and stores in eTemp string
            den1 = Integer.parseInt(ai1);//passes ai string to den
            {
            before2.setText("Fraction before simplified: " + newNum1 + " / " + den1);// these codes are for demonstrating message in the textField
            }
        for(int i = newNum1; i >= 1; i--)//The Java for loop is used to iterate a part of the program several times. If the number of iteration is fixed, it is recommended to use for loop. There are three types of for loops in java.
        {  
                    if(newNum1 % i == 0 && den1 % i == 0)//The Java if statement is the most simple decision-making statement. It is used to decide whether a certain statement or block of statements will be executed or not i.e if a certain condition is true then a block of statement is executed otherwise not.
                    {
                        divisor1 = i;// it makes divisor i
                 break;//Break: The break statement in java is used to terminate from the loop immediately. When a break statement is encountered inside a loop, the loop iteration stops there, and control returns from the loop immediately to the first statement after the loop
                    }
        }
        if(divisor1 != 0)//The Java if statement is the most simple decision-making statement.
        {
            newNum1 /= divisor1;// these codes are for calculation
            den1 /= divisor1;//these codes are for calculation
        }}
        
    result2.setText("Fraction after simplified: " + newNum1 + " / " + den1); //setText( ) method is used to set result in the textfield
        num3.setText(null);// these codes are for clearing text from textfield
        num4.setText(null);// these codes are for clearing text from textfield
    }//GEN-LAST:event_jButton12ActionPerformed

    private void jButton13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton13ActionPerformed
         divisorforsecond.setText(" \n" + " Divisor is " + divisor1);//this code is for showing divisor on the textfield

    }//GEN-LAST:event_jButton13ActionPerformed

    private void jButton14ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton14ActionPerformed
          // I wrote these codes for division
int c = Integer.parseInt(num3.getText());// these codes are for getting text from textfield and for creating new integer
int d = Integer.parseInt(num4.getText());// these codes are for getting text from textfield and for creating new integer
if(c>d){// These codes are for showing if c is greater than d what happens below
resultforcalculation.setText(" \n"+ c + "/"+ d + " = \n"+ ""+(c/d));// These codes are for demonstrating result on the textField
}else{// These codes are for showing if d is greater than c what happens below
    resultforcalculation.setText(" \n"+ d + " / " + c + " = \n" + ""+(d/c));// These codes are for demonstrating result on the textField
    System.out.println();//println() is used to print an argument that is passed to it. The statement can be broken into 3 parts which can be understood separately as: System: It is a final class defined in the java. 

        
    }         
    }//GEN-LAST:event_jButton14ActionPerformed

    private void jButton11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton11ActionPerformed
      // I wrote these kinds of codes for addition
int f = Integer.parseInt(num1.getText());// these codes are for getting text from textfield and for creating new integer
int h = Integer.parseInt(num2.getText());// these codes are for getting text from textfield and for creating new integer
int k = Integer.parseInt(num3.getText());// these codes are for getting text from textfield and for creating new integer
int l = Integer.parseInt(num4.getText());// these codes are for getting text from textfield and for creating new integer
{
resultforcalculation.setText("Addition of all fractions are" + "\n" + f + "/" + h + " + " + k + "/" + l + "= \n" + ""+(f+k) + "/" + h);// These codes are for demonstrating result on the textField

}
       
    }//GEN-LAST:event_jButton11ActionPerformed

    private void num3KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_num3KeyTyped
                char c = evt.getKeyChar();//The getKeyChar method always returns a valid Unicode character or char undefined. For key pressed and key released events, the getKeyCode method returns the event's keyCode.
      if (!Character.isDigit(c)){//Function isdigit() takes a single argument in the form of an integer and returns the value of type int . Even though, isdigit() takes integer as an argument, character is passed to the function. Internally, the character is converted to its ASCII value for the check
          evt.consume();//The @Consumes annotation is used to specify which MIME media types of representations a resource can accept, or consume, from the client.
         num3.setText("Enter number!");//I wrote these codes, since when user entered letter to textfield it will show "enter number".
      }
    }//GEN-LAST:event_num3KeyTyped

    private void num4KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_num4KeyTyped
                char c = evt.getKeyChar();//The getKeyChar method always returns a valid Unicode character or char undefined. For key pressed and key released events, the getKeyCode method returns the event's keyCode.
      if (!Character.isDigit(c)){//Function isdigit() takes a single argument in the form of an integer and returns the value of type int . Even though, isdigit() takes integer as an argument, character is passed to the function. Internally, the character is converted to its ASCII value for the check
          evt.consume();//The @Consumes annotation is used to specify which MIME media types of representations a resource can accept, or consume, from the client.
         num4.setText("Enter number!");//I wrote these codes, since when user entered letter to textfield it will show "enter number".
      }
    }//GEN-LAST:event_num4KeyTyped

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Fractionsimplifyer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Fractionsimplifyer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Fractionsimplifyer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Fractionsimplifyer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Fractionsimplifyer().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField before;
    private javax.swing.JTextField before2;
    private javax.swing.JTextField divisorforfirst;
    private javax.swing.JTextField divisorforsecond;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton12;
    private javax.swing.JButton jButton13;
    private javax.swing.JButton jButton14;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JList<String> jList1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JSeparator jSeparator5;
    private javax.swing.JTextField num1;
    private javax.swing.JTextField num2;
    private javax.swing.JTextField num3;
    private javax.swing.JTextField num4;
    private javax.swing.JTextField result;
    private javax.swing.JTextField result2;
    private javax.swing.JTextField resultforcalculation;
    // End of variables declaration//GEN-END:variables

}
